name: Release

env:
  # deploymentNameBuild: ${{ github.event.inputs.deploymentNameBuild }}
  # location: ${{ github.event.inputs.location }}
  resourceGroup: '${{ secrets.PREFIX }}-rg'
  buildBicepPath: './deploy/build/main.bicep'
  releaseSBBicepPath: './deploy/release/servicebus_topic_sub.bicep'
  releaseAPIMBicepPath: './deploy/release/apim_apis.bicep'
  releaseSqlScriptPath: './deploy/release/sql_table.sql'
  deploymentNameSBRelease: '${{ secrets.PREFIX }}sbrelease'
  deploymentNameAPIMRelease: '${{ secrets.PREFIX }}apimrelease'
  sqlDBName: 'sql-${{ secrets.PREFIX }}-db'
  workflowGetName: 'ais-esb-get-wf'
  workflowPathGet: './ais-esb-get-wf'
  workflowPostName: 'ais-esb-post-wf'
  workflowPathPost: './ais-esb-post-wf'
  workflowPathProcessSubOds: './ais-esb-process-sub-ods-wf'
  destinationPath: './deploy/release/ais-esb-wf-release.zip'
  policySendListenName: 'SendListen'
  policySendOnlyName: 'SendOnly'
  serviceBusTopicName: 'customer-topic'
  serviceBusSubODSName: 'customer-ods-sub'
  serviceBusSubUpdName: 'customer-upd-sub'
  serviceBusSubscriptionPath: '/customer-topic/subscriptions/customer-upd-sub/messages/head'

on:
  # Only trigger, when the build workflow succeeded
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
  workflow_dispatch:

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:
  #   inputs:
  #     deploymentNameBuild:
  #       description: 'Deployment Name Build'     
  #       required: true
  #     location:
  #       description: 'Location for deployment'     
  #       required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # LOGIN TO AZURE. THE LOGGED IN SESSION IS ACTIVE TILL A LOGOUT ACTION IS CALLED (OR THE JOB FINISHED)
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true 

      # SET CORRECT AZURE CONTEXT
      - name: 'Set context to subscription'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Set-AzContext -Subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azPSVersion: "latest"

      # IMPORT MODULES
      - name: 'Import modules & extensions'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            az extension add --name application-insights
            az extension add --name logic
            az extension add --yes --source "https://aka.ms/logicapp-latest-py2.py3-none-any.whl"
          azPSVersion: "latest"

      - name: 'Retrieve API Management Instance & Application Insights Name'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $apimName = az apim list --resource-group '${{ env.resourceGroup }}' --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' --query '[].{Name:name}' -o tsv
            $appInsightsName = az monitor app-insights component show -g '${{ env.resourceGroup }}'--query "[].{applicationId:applicationId}" -o tsv
            echo "APIM_NAME=$apimName" >> $Env:GITHUB_ENV
            echo "APPINSIGHTS_NAME=$appInsightsName" >> $Env:GITHUB_ENV
          azPSVersion: "latest"

      - name: 'Release Service Bus Topic and Subscribers'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $serviceBusNamespaceName = az servicebus namespace list --resource-group '${{ env.resourceGroup }}' --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' --query "[].{Name:name}" -o tsv
            echo "SERVICEBUS_NS_NAME=$serviceBusNamespaceName" >> $Env:GITHUB_ENV
            New-AzResourceGroupDeployment -Name '${{ env.deploymentNameSBRelease }}' -ResourceGroupName '${{ env.resourceGroup }}' -serviceBusNamespaceName $serviceBusNamespaceName -serviceBusTopicName '${{ env.serviceBusTopicName }}' -serviceBusSubODSName '${{ env.serviceBusSubODSName }}' -serviceBusSubUpdName '${{ env.serviceBusSubUpdName }}' -TemplateFile '${{ env.releaseSBBicepPath }}'
          azPSVersion: "latest"

      - name: 'Retrieve Service Bus Access Policy Key'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $policySendListenKey = az servicebus namespace authorization-rule keys list --resource-group '${{ env.resourceGroup }}' --namespace-name '${{ env.SERVICEBUS_NS_NAME }}' --name '${{ env.policySendListenName }}' --query "{primaryKey:primaryKey}" -o tsv
            $serviceBusConnectionString = az servicebus namespace authorization-rule keys list --resource-group '${{ env.resourceGroup }}' --namespace-name '${{ env.SERVICEBUS_NS_NAME }}' --name 'RootManageSharedAccessKey' --query "{primaryConnectionString:primaryConnectionString}" -o tsv
            echo "POLICY_SEND_LISTEN_KEY=$policySendListenKey" >> $Env:GITHUB_ENV
            echo "SB_CONNECTIONSTRING=$serviceBusConnectionString" >> $Env:GITHUB_ENV
          azPSVersion: "latest"

      - name: 'Generate Service Bus SAS Key and store in API Management as Named Value'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $null = [Reflection.Assembly]::LoadWithPartialName("System.Web")
            
            # Set Variables
            $serviceBusNameSpace="${{ env.SERVICEBUS_NS_NAME }}"
            $accessPolicyName="${{ env.policySendListenName }}"
            $dateTime=(Get-Date).ToString()
            $URI="$serviceBusNameSpace.servicebus.windows.net"
            $accessPolicyKey="${{ env.POLICY_SEND_LISTEN_KEY }}"

            #Generate Temp SAS Token
            $expires=([DateTimeOffset]::Now.ToUnixTimeSeconds())+31587840
            $signatureString=[System.Web.HttpUtility]::UrlEncode($URI)+ "`n" + [string]$expires
            $HMAC = New-Object System.Security.Cryptography.HMACSHA256
            $HMAC.key = [Text.Encoding]::ASCII.GetBytes($accessPolicyKey)
            $signature = $HMAC.ComputeHash([Text.Encoding]::ASCII.GetBytes($signatureString))
            $signature = [Convert]::ToBase64String($signature)
            $SASToken = "SharedAccessSignature sr=" + [System.Web.HttpUtility]::UrlEncode($URI) + "&sig=" + [System.Web.HttpUtility]::UrlEncode($signature) + "&se=" + $expires + "&skn=" + $accessPolicyName
            
            az apim nv create --service-name '${{ env.APIM_NAME }}' -g '${{ env.resourceGroup }}' --named-value-id '${{ env.serviceBusTopicName }}' --display-name '${{ env.serviceBusTopicName }}' --value $SASToken --secret true
          azPSVersion: "latest"

      - name: 'Get SQL Connection String'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $serverFQDName = az sql server list --resource-group '${{ env.resourceGroup }}' --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' --query "[].{fullyQualifiedDomainName:fullyQualifiedDomainName}" -o tsv
            $sqlConnectionStringLa = "Server=$serverFQDName;Database=${{ env.sqlDBName }};User ID=${{ secrets.ADMINISTRATOR_LOGIN_SQL }};Password=${{ secrets.ADMINISTRATOR_LOGIN_PASSWORD_SQL }}"
            $sqlConnectionStringSql = "Server=$serverFQDName;User ID=${{ secrets.ADMINISTRATOR_LOGIN_SQL }};Password=${{ secrets.ADMINISTRATOR_LOGIN_PASSWORD_SQL }};Initial Catalog=${{ env.sqlDBName }}"
            echo "AZURE_SQL_CONNECTION_STRING_LA=$sqlConnectionStringLa" >> $Env:GITHUB_ENV
            echo "AZURE_SQL_CONNECTION_STRING_SQL=$sqlConnectionStringSql" >> $Env:GITHUB_ENV
          azPSVersion: "latest"

      - name: 'Create SQL Tables'
        uses: azure/sql-action@v1.3
        with:        
          connection-string: ${{ env.AZURE_SQL_CONNECTION_STRING_SQL }}
          sql-file: '${{ env.releaseSqlScriptPath }}'

      - name: 'Release Logic App Workflows & Connections'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $logicAppName = az logicapp list --resource-group '${{ env.resourceGroup }}' --subscription '${{ secrets.AZURE_SUBSCRIPTION_ID }}' --query "[].{Name:name}" -o tsv
            echo "LA_NAME=$logicAppName" >> $Env:GITHUB_ENV
            .\deploy\release\logicapps_wf.ps1 -subscriptionId '${{ secrets.AZURE_SUBSCRIPTION_ID }}' -resourceGroup '${{ env.resourceGroup }}'-logicAppName $logicAppName -workflowPathGet '${{ env.workflowPathGet }}' -workflowPathPost '${{ env.workflowPathPost }}' -workflowPathProcessSubOds '${{ env.workflowPathProcessSubOds }}' -sqlConnectionString '${{ env.AZURE_SQL_CONNECTION_STRING_LA }}' -serviceBusConnectionString '${{ env.SB_CONNECTIONSTRING }}' -destinationPath '${{ env.destinationPath }}'
            az webapp restart --name $logicAppName --resource-group '${{ env.resourceGroup }}'
          azPSVersion: "latest"

      - name: 'Retrieve SAS Keys and store in API Management as Named Value'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            .\deploy\release\get-saskey-from-logic-app.ps1 -subscriptionId '${{ secrets.AZURE_SUBSCRIPTION_ID }}' -resourceGroup '${{ env.resourceGroup }}' -logicAppName '${{ env.LA_NAME }}' -workflowName '${{ env.workflowGetName }}' -apimName '${{ env.APIM_NAME }}' -apimNamedValueSig '${{ env.workflowGetName }}'
            .\deploy\release\get-saskey-from-logic-app.ps1 -subscriptionId '${{ secrets.AZURE_SUBSCRIPTION_ID }}' -resourceGroup '${{ env.resourceGroup }}' -logicAppName '${{ env.LA_NAME }}' -workflowName '${{ env.workflowPostName }}' -apimName '${{ env.APIM_NAME }}' -apimNamedValueSig '${{ env.workflowPostName }}'
          azPSVersion: "latest"

      - name: 'Release API definition to API Management'
        uses: azure/powershell@v1
        with:
          inlineScript: |
            New-AzResourceGroupDeployment -Name '${{ env.deploymentNameAPIMRelease }}' -ResourceGroupName '${{ env.resourceGroup }}' -apimName '${{ env.APIM_NAME }}' -appInsightsName '${{ env.APPINSIGHTS_NAME }}' -logicAppName '${{ env.LA_NAME }}' -serviceBusNamespaceName '${{ env.SERVICEBUS_NS_NAME }}' -serviceBusSubscriptionPath '${{ env.serviceBusSubscriptionPath }}' -serviceBusSendListenSigNamedValue '${{ env.serviceBusTopicName }}' -workflowGetName '${{ env.workflowGetName }}' -workflowGetSigNamedValue '${{ env.workflowGetName }}' -workflowPostName '${{ env.workflowPostName }}' -workflowPostSigNamedValue '${{ env.workflowPostName }}' -TemplateFile '${{ env.releaseAPIMBicepPath }}'
          azPSVersion: "latest"

      # LOGOUT
      - name: logout
        run: |
          az logout
